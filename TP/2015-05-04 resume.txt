def fibo_1(n) :
    global k1
    k1 += 1
    if n < 0 :
        return 0 
    if n < 2 :
        return 1
    fibo_1(n-1)+fibo_1(n-2)
    return fibo_1(n-1)+fibo_1(n-2)

def fibo_2(n) :
    global k2
    if n < 0 : return 0
    liste = [1, 1]
    for i in range(1, n):
        k2 += 1
        liste.append(liste[i - 1] + liste[i])
    return liste[n]

def fibo_3(n) :
    global k3
    if n < 0 : return 0
    previous, last = 1, 1
    for i in range(1, n) :
        k3 += 1
        previous, last = last, previous+last
    return last

P = [2, 3, 4]
Q = [1, 2, 3]

def mult_poly_naif(P, Q):
    R = [0]*(len(P)+len(Q)-1)
    operations = 0
    for i in range(0, len(P)) :
        for j in range(0, len(Q)) :
            R[i+j] += P[i]*Q[j]
            operations += 2
    print("Nombre d'opÃ©rations : ",operations)
    return R;

def mult_poly_rec(P, Q):
    R = [0]*(len(P)+len(Q)-1)
    if(len(P)==1):
        R[0] = Q[0] * P[0]
    else :
        p0 = P[0 : len(P)//2]
        p1 = P[len(P)//2 : len(P)]
        q0 = Q[0 : len(Q)//2]
        q1 = Q[len(Q)//2 : len(Q)]

        r1 = mult_poly_rec(p0, q0)
        r2 = mult_poly_rec(p1, q0)
        r3 = mult_poly_rec(p0, q1)
        r4 = mult_poly_rec(p1, q1)

        for i in range(len(r1)):
            R[i] += r1[i]
            R[i + len(P)//2] += r2[i] + r3[i]
            R[i + len(P)] += r4[i]
    return R
	
def tri_selection(t):
    res = []
    c = 0
    while len(t) != 0:
        min = t[0]
        for i in range(len(t)):
            if min > t[i]:
                min = t[i]
            c += 1
        res.append(min)
        t.remove(min)
    return c, t	

def tri_insertion(t):
    c = 0
    for i in range(len(t)):
        for j in range(i, 0, -1):
            c += 1
            if t[j] < t[j-1]:
                t[j], t[j-1] = t[j-1], t[j]
            else :
                break
    return c, t

def tri_bulles(t):
    i = len(t)-1
    while i != 0:
        k = 0
        for j in range(0, i):
            if t[j] > t[j+1]:
                t[j], t[j+1] = t[j+1], t[j]
                k = j
        i = k
    return t
	
def fusion(t1, t2):
    if len(t1) == 0:
        return t2
    elif len(t2) == 0:
        return t1
    elif t1[0] < t2[0]:
        return [t1[0]] + fusion(t1[1:], t2)
    else :
        return [t2[0]] + fusion(t1, t2[1:])

def tri_fusion(t, debut, fin):
    if fin - debut < 2:
        return t[debut:fin]
    else :
        milieu = (debut+fin)//2
        gauche = tri_fusion(t, debut, milieu)
        droite = tri_fusion(t, milieu, fin)

    return fusion(gauche, droite)


def tri_rapide(t, debut, fin):
    if fin-debut < 2 : return
    indice_pivot  = partition(t, debut, fin)
    tri_rapide(t, debut, indice_pivot)
    tri_rapide(t, indice_pivot+1, fin)

def partition(t, debut, fin):
    if fin-debut == 2 and t[debut]<t[debut+1] : return debut+1
    pivot, gauche, droite = t[debut], debut+1, fin-1
    while gauche < droite:
        while gauche < fin and t[gauche] < pivot :
            gauche += 1
        while t[droite] > pivot :
            droite -= 1
        if gauche < droite :
            t[gauche], t[droite] = t[droite], t[gauche]
    t[debut], t[droite] = t[droite], pivot
    return droite

	
from random import randint

def randomPermutation(n) :
    l = [i+1 for i in range(n)]
    for i in range(n):
        r = randint(i, n-1)
        if i != r :
            l[i], l[r] = l[r], l[i]
    return l

def hauteur(n):
    if n == [] : return 0
    return 1+max(hauteur(n[1]), hauteur(n[2]))

def affPrefixe(n):
    if n == [] : return ""
    return str(n[0]) + affPrefixe(n[1]) + affPrefixe(n[2])

def affInfixe(n):
    if n == [] : return ""
    return affInfixe(n[1]) + str(n[0]) + affInfixe(n[2])

A2 = [[4, 1, 2, -1],#0
      [2, 3, -1, 0],#1
      [6, 4, 5, 0],#2
      [1, -1, -1, 1],#3
      [5, -1, -1, 2],#4
      [8, 6, 7, 2],#5
      [7, -1, -1, 5],#6
      [9, -1, -1, 5]#7
      ]

def affichagePrefixe(A):
    res = ""
    n = 0
    while n > -1:
        res += str(A[n][0])
        if A[n][1] == -1:
            if A[n][2] == -1:
                while (A[A[n][3]][1] == n and A[A[n][3]][2] == -1) or A[A[n][3]][2] == n:
                    n = A[n][3]
                n = A[A[n][3]][2]
            else :
                n = A[n][2]
        else :
            n = A[n][1]
    return res

